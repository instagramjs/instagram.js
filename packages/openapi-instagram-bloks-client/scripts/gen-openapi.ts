import {
  type AutogenConfig,
  createMitmJsonReader,
  createOpenAPIAutogen,
} from "@instagramjs/openapi-autogen";
import fs from "fs";
import openapiTS, { astToString, type OpenAPI3 } from "openapi-typescript";
import path from "path";
import yaml from "yaml";

import { INSTAGRAM_BLOKS_API_BASE_URL } from "~/const";

const GENERATOR_CONFIG: AutogenConfig = {
  name: "Instagram Bloks API",
  apiPrefix: INSTAGRAM_BLOKS_API_BASE_URL,
  pathMatchers: ["/apps/:appId/"],
  filterResponse: () => false,
};

const FLOWS_JSON_FILE = path.join(
  import.meta.dirname,
  "..",
  "..",
  "..",
  "reverse-engineering",
  "flows_json.out",
);
const OPENAPI_SPEC_FILE = path.join(import.meta.dirname, "..", "openapi.yaml");
const SCHEMA_CODE_FILE = path.join(
  import.meta.dirname,
  "..",
  "src",
  "schema.ts",
);

const HEADER = `/**
 * This file was generated by scripts/gen-openapi.ts
 * Do not edit this file manually.
 */

/* eslint-disable */
/* prettier-ignore */

`;

async function main() {
  try {
    await fs.promises.access(FLOWS_JSON_FILE, fs.constants.F_OK);
  } catch {
    console.error(`Flows JSON dump does not exist at ${FLOWS_JSON_FILE}`);
    process.exit(1);
  }

  let existingSpec: OpenAPI3 | null = null;
  try {
    existingSpec = yaml.parse(
      await fs.promises.readFile(OPENAPI_SPEC_FILE, "utf-8"),
    );
  } catch {
    // ignore
  }

  const autogenStartedAt = Date.now();

  const autogen = createOpenAPIAutogen(GENERATOR_CONFIG, existingSpec);
  const reader = createMitmJsonReader(FLOWS_JSON_FILE);

  const spec = await new Promise<OpenAPI3>((resolve, reject) => {
    reader.on("read", (flow) => autogen.processFlow(flow));
    reader.on("error", (err) => {
      console.error(`Error reading flows JSON: ${err}`);
      reject(err);
    });
    reader.on("complete", () => {
      resolve(autogen.complete());
    });
  });

  console.log(`Generated OpenAPI spec in ${Date.now() - autogenStartedAt}ms`);

  await fs.promises.writeFile(OPENAPI_SPEC_FILE, yaml.stringify(spec));

  const openapiTsStartedAt = Date.now();
  const ast = await openapiTS(spec);
  const schemaCode = astToString(ast);
  console.log(
    `Generated TypeScript schema in ${Date.now() - openapiTsStartedAt}ms`,
  );

  await fs.promises.writeFile(SCHEMA_CODE_FILE, HEADER + schemaCode);
}

main();
