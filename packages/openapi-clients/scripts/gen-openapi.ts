import {
  type AutogenConfig,
  createMitmFlowsJsonReader,
  createOpenAPIAutogen,
} from "@instagramjs/openapi-autogen";
import fs from "fs";
import openapiTS, { astToString, type OpenAPI3 } from "openapi-typescript";
import path from "path";
import yaml from "yaml";

import { FACEBOOK_GRAPH_API_BASE_URL } from "~/facebook-graph/const";
import { INSTAGRAM_API_BASE_URL } from "~/instagram/const";
import { INSTAGRAM_GRAPH_API_BASE_URL } from "~/instagram-graph/const";

const FLOWS_JSON_FILE = path.join(
  import.meta.dirname,
  "..",
  "..",
  "..",
  "reverse-engineering",
  "flows_json.out",
);
const BASE_OPENAPI_DIR = path.join(import.meta.dirname, "..", "openapi");
const BASE_SRC_DIR = path.join(import.meta.dirname, "..", "src");

type GeneratorConfig = {
  name: string;
  apiPrefix: string;
  openapiDir: string;
  srcDir: string;
  autogenConfig?: Partial<AutogenConfig>;
};

const GENERATOR_CONFIGS: GeneratorConfig[] = [
  {
    name: "Instagram API",
    apiPrefix: INSTAGRAM_API_BASE_URL,
    openapiDir: path.join(BASE_OPENAPI_DIR, "instagram"),
    srcDir: path.join(BASE_SRC_DIR, "instagram"),
    autogenConfig: {
      filterExample: () => false,
      filterRequest: ({ request }) => !request.path.startsWith("/v1/bloks"),
      filterSchema: ({ path }) => !path.endsWith("bloks_payload"),
    },
  },
  {
    name: "Instagram Graph API",
    apiPrefix: INSTAGRAM_GRAPH_API_BASE_URL,
    openapiDir: path.join(BASE_OPENAPI_DIR, "instagram-graph"),
    srcDir: path.join(BASE_SRC_DIR, "instagram-graph"),
    autogenConfig: {
      filterExample: () => false,
    },
  },
  {
    name: "Facebook Graph API",
    apiPrefix: FACEBOOK_GRAPH_API_BASE_URL,
    openapiDir: path.join(BASE_OPENAPI_DIR, "facebook-graph"),
    srcDir: path.join(BASE_SRC_DIR, "facebook-graph"),
    autogenConfig: {
      filterExample: () => false,
    },
  },
];

const HEADER = `/**
 * This file was generated by scripts/gen-openapi.ts
 * Do not edit this file manually.
 */

/* eslint-disable */
/* prettier-ignore */

`;

async function generate(config: GeneratorConfig) {
  const log = (level: "info" | "error", message: string) => {
    console[level](`[${config.name}] ${message}`);
  };

  const openapiDefFile = path.join(config.openapiDir, "openapi.yaml");
  const openapiTsFile = path.join(config.srcDir, "schema.ts");

  await fs.promises.mkdir(config.openapiDir, { recursive: true });
  await fs.promises.mkdir(config.srcDir, { recursive: true });

  let existingDef: OpenAPI3 | null = null;
  try {
    existingDef = yaml.parse(
      await fs.promises.readFile(openapiDefFile, "utf-8"),
    );
  } catch {
    // ignore
  }

  const autogenStartedAt = Date.now();

  const autogen = createOpenAPIAutogen(
    {
      name: config.name,
      apiPrefix: config.apiPrefix,
      ...config.autogenConfig,
    },
    existingDef,
  );
  const reader = createMitmFlowsJsonReader({
    filepath: FLOWS_JSON_FILE,
  });
  reader.on("read", (flow) => autogen.processFlow(flow));

  const def = await new Promise<OpenAPI3>((resolve, reject) => {
    reader.on("error", (err) => {
      log("error", `Error reading flows JSON: ${err}`);
      reject(err);
    });
    reader.on("complete", () => {
      log("info", "Completed reading flows JSON");
      resolve(autogen.complete());
    });
  });

  log("info", `Generated OpenAPI spec in ${Date.now() - autogenStartedAt}ms`);

  await fs.promises.writeFile(openapiDefFile, yaml.stringify(def));

  const openapiTsStartedAt = Date.now();
  const ast = await openapiTS(def);
  const schemaCode = astToString(ast);
  log(
    "info",
    `Generated TypeScript schema in ${Date.now() - openapiTsStartedAt}ms`,
  );

  await fs.promises.writeFile(openapiTsFile, HEADER + schemaCode);
}

async function main() {
  try {
    await fs.promises.access(FLOWS_JSON_FILE, fs.constants.F_OK);
  } catch {
    console.error(`Flows JSON dump does not exist at ${FLOWS_JSON_FILE}`);
    process.exit(1);
  }

  await Promise.all(GENERATOR_CONFIGS.map((config) => generate(config)));
}

main();
